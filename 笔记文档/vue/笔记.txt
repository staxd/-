vue => view

___________________________________

一、概念

1.x
2.x
常用指令：

v-show   display  true/false 

json =>键值对
左边是key  右边是value

v-for {{$index}}=>索引值
{{$key}}=>key值

双向绑定 => v-model
数据 和 输出 进行绑定

__________________________________

二、事件

v-on:click <=> @click

事件对象
$event

防止冒泡
1.event.cancelBubble = true
2.event.stopPropagation();
3.@click.stop 推荐

阻止默认事件
1.event.preventDefault
2.@contextmenu.prevent 推荐

键盘事件
keydown/keyup
keyCode

keydown.65.67.68
keydown.left/right/up/down

______________________________________

三、模板 {{}}

data改变，输出内容会从新渲染
用{{*msg}}，只渲染一遍

{{}} => innertext
{{{}}} => innerHTML

_______________________________________

四、属性

一但使用vue的方法，就不要使用vue的模板。
使用原生的属性时，请使用模板。


v-bind:属性名 => :属性名
v-bind:属性名="vue的data值"

style/class =>经常用的两个属性

<div :class="json"></div>
json
{
	class的类名：true/false
}

<div :style="json"></div>
style => json
	  => [json,json,json]
	  => :style:"string"

_____________________________________

五、选项卡：tab面板

_____________________________________

六、vue1.x 交互

前端           -   后端   -      数据库
html+css+js     php/net/node    /mysql

node.js => js基本都是js语法
node安装完后 有个包管理器 叫 npm
npm 有个方法叫 install
npm install bower -g
bower - 只是npm包管理器中的其中一个包
bower info vue 查看版本
bower i 下载库的名字#版本号
推荐了一个插件 vue-resource

demo <>
登陆
输入用户名
输入密码
登陆按钮
登陆成功 -> 成功 ->用户名密码错误

get/post
this.$http -> get/post

this.$http.get('地址',{
	
}).then(function(){},function(){
	
})

this.$http.get('地址',{
	
}).then(function(){}).catch(function(){
	
})

this.$http.post('地址',{
	
}).then(function(){}).catch(function(){
	
})


vue 1.x - get / post / jsonp

jsonp=> 回调函数的key值

_______________________________

七、计算函数
data
computed - 可以计算的属性 计算咱们的data

属性 必须是函数
c:function(){
	return 计算输出值；
}

need:{
	//读取
	get:function(){

	},
	//设置
	set:function(){

	}
}

$watch() <= 看 盯着 回调函数帮咱们执行
watch 真正的数据改了 才会出发回调函数了
a.$watch(数据，function（）{})

——————————————————————————————————————————————

八、过滤器

过滤器就是把原来的数据 加工一下变成想要的

vue内置过滤器
capitalize - 首字母大写
uppercase  - 所有的英文字母大写
lowercase  - 所有的英文字母小写

currency   - 变成货币形式的一种输出
pluralize  - 复数+s
debounce   - 等待处理 默认300毫秒
limitBy    - 截取 第一个参数截取几个 第二个参数从第几个开始截取
filterBy   - 给出关键字 帮忙过滤
orderBy    - 排序 1升序 -1降序

自定义过滤器
Vue.filter(过滤器的名称，function（）{
	return 值（过滤出来的值）
})
双向过滤器
vue.filter(过滤器的名称，{
	read:function(){

	},
	write:function(){

	}
})

——————————————————————————————————————————————————

九、实例方法

$mount('') 这个级别没有el高
$data 就是data
$el 可以获取原生的dom对象
$options 获取自定义属性
$log 可以快速看到data的内容
$destroy 销毁内容

_____________________________________________________

十、自定义属性

<div v-自定义的名字></div>
v-abc-d <=> abcD
单向
Vue.directive('自定义的名字'，function(){})
双向
Vue.directive('自定义的名字', {
	bind(){
	初始化
	}，
	update(){
	数据改变了 就走一遍update
	}
})
属性元素 elementDirective

_____________________________________________________


十一、bower 包管理器

node npm 包管理器 npm包
都得require 才能用
bower 前端包管理器
npm  =>  bower
cnpm i bower -g

生命周期 从无到有 从有到无

created 实例已经创建了
beforeCompile 在实例编译之前
conpiled 在实例编译之后执行
ready 实例已经插入到文档之中
beforeDestroy 在销毁之前
destroyed 在销毁之后

——————————————————————————————————————————————————————

十二、vue 动画
原理
transition
animation
老板要求 ie8.0以下

动画 
进入之前  -显示  -离开

transition = "自定义的名字"

自定义的名字-transition 显示时的状态
自定义的名字-leave 消失时的状态
自定义的名字-enter 进入时到显示时的过度动画


bower install animate.css
使用 animate.css
transition:{
	自定义名字:{
		enterClass:''
		leaveClass:''
	}
}

______________________________________________________

十三、组件 - 一大堆零件组合成的一个成品，换成html的话，一大堆元素组成一个模块，这个模块有自己的作用。


vue - 全局组件

var wu = Vue.extend（{
	template：'需要的html元素'
}）
Vue.component("自己定义的标签名",wu);

组件里的data不同于实例化vae的data
组件里的data必须是一个函数
并且想输出内容 用return 即可

vue - 局部组件
 new Vue({
 	el:'局部作用域'，
 	conponents:{
 		标签名：组件
 	}

 })

 组件只能拿自己的return里的东西
 事件也是一样 只能用自己的methods

 组件模板

 <template id='wu'>
 </template>
 template:'#wu'

<input type="button" value="aaa" @click="msg='aaa'">
<input type="button" value="bbb" @click="msg='bbb'">

<compontent :is="msg"></compontent> 标签
is属性是哪个组件 就把名字给is属性即可

组件是可以无限去套组件的
只能套自己下面的第一层组件

第三层 只能用第二层的套

父子级数据交互
父级传子集